package de.uniwue.jpp.fractions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Fraction implements Element {

    private Element numerator;
    private Element denominator;

    public Fraction(Element numerator, Element denominator){
        if(numerator == null || denominator == null){
            throw new NullPointerException();
        }
        if(numerator.width() == 0 || denominator.width() == 0){
            throw new IllegalArgumentException("0");
        }
        this.numerator = numerator;
        this.denominator = denominator;
    }

    @Override
    public String toString() {

        int main;
        int rightnu;
        int leftnu;
        int rightde;
        int leftde;

        if(this.numerator.width() > this.denominator.width()){
            /**if(this.numerator.toString().contains(String.valueOf('\u0028'))){
                main = this.numerator.width();
            }else{*/
            main = this.numerator.width() + 2;


        }else{
            /**if(this.denominator.toString().contains(String.valueOf('\u0028'))){
                main = this.denominator.width();
            }else {*/
                main = this.denominator.width() + 2;

        }
        //ZÃ¤hler zentrieren
        if((main - this.numerator.width()) % 2 > 0 ){
            rightnu = ((main - this.numerator.width()) + 1)/2;
            leftnu = main - this.numerator.width() - rightnu;
            //System.out.println("ungerade:" + rightnu + "," + leftnu + " " + this.numerator + " " + "Main:" + main + ";");
        }else {
            rightnu = (main - this.numerator.width()) / 2;
            leftnu = rightnu;
          //  System.out.println("gerade:" + rightnu + "," + leftnu + " " + this.numerator + " " + "Main:" + main + ";");
        }

        System.out.println("Zaehler: " + this.numerator + "," + main + "," + rightnu + "," +leftnu + ";");

        //Nenner zentrieren
        if((main - this.denominator.width()) % 2 > 0 ){
            rightde = ((main - this.denominator.width()) + 1)/2;
            leftde = main - this.denominator.width() - rightde;
        }else {
            rightde = (main - this.denominator.width()) / 2;
            leftde = rightde;
        }
        System.out.println("Nenner: " + this.denominator + "," + main + "," + rightde + "," +leftde + ";");

        StringBuilder Str = new StringBuilder();


        if(this.numerator.toString().contains("\n")){
            String[] temp = this.numerator.toString().split("\n");
            String re = "";
            String li = "";
            if(leftnu == rightnu){
                for(int i = 0; i < leftnu; i++){
                    li += '\u0020';
                }
                re = li;
            }else{
                for(int i = 0; i < leftnu; i++){
                    li += '\u0020';
                }
                for(int i = 0; i < rightnu; i++){
                    re += '\u0020';
                }
            }

            for(int i = 0; i < temp.length; i++){
                temp[i] = li + temp[i] + re;
                Str.append(temp[i]);
                if(i < temp.length - 1){
                    Str.append("\n");
                }
            }



        }
        else {
            for (int i = 0; i < leftnu; i++) {
                Str.append('\u0020');
            }

            Str.append(numerator);

            for (int i = 0; i < rightnu; i++) {
                Str.append('\u0020');
            }
        }

        Str.append('\n');

        for(int i = 0; i < main; i++){
            Str.append('\u2014');
        }

        Str.append('\n');

        for(int i = 0; i < leftde ; i++){
            Str.append('\u0020');
        }

        Str.append(denominator);

        for(int i = 0; i < rightde; i++){
            Str.append('\u0020');
        }
        //System.out.println("Zaehler:" + numerator.toString() + ";");
        //System.out.println("nenner:" +  denominator.toString() + ";");
        //System.out.println(Str.toString());
        return Str.toString();
    }

    @Override
    public int width() {
        if(this.numerator.width() > this.denominator.width()){
            return this.numerator.width() ;
        }
        return this.denominator.width() ;
    }

    @Override
    public int lineCount() {
        /**int lines = 0;
        for (Element i: this ) {
            if (i.toString().contains("\n")) {
                lines++;
            } else {
                lines++;
            }
        }

        String[] n = this.numerator.toString().split("\n");
        String[] d = this.denominator.toString().split("\n");



        if(n.length > d.length){
            System.out.println(n.length);
            return n.length;
        }else{
            System.out.println(d.length);
            return d.length;
        }*/
        //System.out.println(this.numerator.lineCount() + this.denominator.lineCount() + 1);
        return this.numerator.lineCount() + this.denominator.lineCount() + 1;
    }
}

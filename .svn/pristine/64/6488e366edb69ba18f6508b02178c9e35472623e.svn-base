package de.uniwue.jpp.fractions;

import java.util.regex.Pattern;

public class Parser {

    private static final char FRACTION = '\u002f';
    private static final char OPEN = '\u0028';
    private static final char CLOSE = '\u0029';


    public static Element parse(String input){
        if(input.length() - input.replace(String.valueOf(OPEN),"").length() != input.length() - input.replace(String.valueOf(CLOSE),"").length()){
            throw new IllegalArgumentException();
        }
        if(Pattern.matches(FRACTION + "{2,}", input)){
            throw new IllegalArgumentException("//");
        }


        input = input.trim();

        if (!input.contains(String.valueOf(FRACTION))) {
            return new Term(input);
        }

        input = removeBracket(input);

        String[] fraction = findFraction(input);
        if(fraction != null && fraction.length == 2){
            //System.out.println("zaehler:" + fraction[0] +" nenner:" + fraction[1]);
            return new Fraction(parse(fraction[0]), parse(fraction[1]));
        }

        String[] operator = findOperator(input);

        //System.out.println("o:" + parse(operator[0]) + "\n o:-" + operator[1] + "- \no:" + parse(operator[2]));

        return new Operator(parse(operator[0]), operator[1], parse(operator[2]));

    }

    private static String[] findOperator(String input) {
        int counter = 0;
        String operant_1 = "";
        String operant_2 = "";
        String operator = "";


        int index = 0;
        int i=0;
        while(i < input.length()) {

            if(input.charAt(i) == OPEN && counter == 0) {
                index = i;
            }

            if (input.charAt(i) == OPEN) {
                counter ++;
            }else if(input.charAt(i) == CLOSE) {
                counter--;
            }

            if (input.charAt(i) == CLOSE) {
                if (counter == 0) {
                    if (operant_1.equals(""))
                        operant_1 = input.substring(index, i + 1);
                    else {
                        operant_2 = input.substring(index, i + 1);
                    }

                }
            }
            i++;
        }
        operator = input.replace(operant_1, "");
        operator = operator.replace(operant_2, "");

        if (operant_2.equals("")) {
            operant_2 = operant_1;
            operant_1 = "";
        }
        //System.out.println("o1: " + operant_1);
        //System.out.println(operator);
        //System.out.println("o2: " + operant_2);
        return new String[]{operant_1, operator, operant_2};
    }

    private static String[] findFraction(String input){
        int counter = 0;
        int index = -1;
        for(int i = input.length() - 1; i > 0; i--) {
            if(input.charAt(i) == CLOSE) {
                counter++;
            }
            else if(input.charAt(i) == OPEN){
                counter --;
            }
            else if((input.charAt(i) == FRACTION) && (counter == 0)){
                index = i;
                break;
            }
        }
        if(index == -1) return null;
        String nenner = input.substring(0, index);
        String zaehler = input.substring(index+1, input.length());
        //System.out.println("zeahler:" + zaehler + "nenner:" + nenner);
        return new String[]{nenner, zaehler};

    }

    private static String removeBracket(String input){
        int counter = 0;
        boolean remove = false;
        for(int i = 0; i<input.length(); i++){
            if(input.charAt(i) == OPEN) counter++;
            else if(input.charAt(i) == CLOSE) counter --;
            if(counter == 0){
                if(i == input.length()-1){
                    remove = true;
                }
                break;
            }
        }
        if(remove){
            return removeBracket(input.substring(1, input.length()-1));
        }
        else{
            return input;
        }
    }

    public static void main(String[] args) {
        String test ="((( log(y))/(1))! + (( z )/((5x)!)))";
        //String o1 = "(( log(y))/(1))";
        //String o2 = "(( z )/((5x)!))";
        //String op = "! + ";
        System.out.print("\n\n\n\n\n " + parse(test));
    }
}
